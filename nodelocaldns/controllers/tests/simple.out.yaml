apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    addons.x-k8s.io/nodelocaldns: nodelocaldns-sample
    k8s-app: nodelocaldns
    kubernetes.io/cluster-service: "true"
  name: node-local-dns
  namespace: kube-system

---

apiVersion: v1
data:
  Corefile: |
    cluster.local:53 {
        errors
        cache {
                success 9984 30
                denial 9984 5
        }
        reload
        loop
        bind 169.254.20.10 10.96.0.10
        forward . __PILLAR__CLUSTER__DNS__ {
                force_tcp
        }
        prometheus :9253
        health 169.254.20.10:8080
        }
    in-addr.arpa:53 {
        errors
        cache 30
        reload
        loop
        bind 169.254.20.10 10.96.0.10
        forward . __PILLAR__CLUSTER__DNS__ {
                force_tcp
        }
        prometheus :9253
        }
    ip6.arpa:53 {
        errors
        cache 30
        reload
        loop
        bind 169.254.20.10 10.96.0.10
        forward . __PILLAR__CLUSTER__DNS__ {
                force_tcp
        }
        prometheus :9253
        }
    .:53 {
        errors
        cache 30
        reload
        loop
        bind 169.254.20.10 10.96.0.10
        forward . __PILLAR__UPSTREAM__SERVERS__ {
                force_tcp
        }
        prometheus :9253
        }
kind: ConfigMap
metadata:
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    addons.x-k8s.io/nodelocaldns: nodelocaldns-sample
    k8s-app: nodelocaldns
  name: node-local-dns
  namespace: kube-system

---

apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  annotations: null
  labels:
    addons.x-k8s.io/nodelocaldns: nodelocaldns-sample
    k8s-app: nodelocaldns
  name: node-local-dns
  namespace: kube-system
spec:
  assemblyPhase: Pending
  componentGroupKinds:
  - group: app.k8s.io
    kind: Application
  - group: ""
    kind: ConfigMap
  - group: apps
    kind: DaemonSet
  - group: ""
    kind: Service
  - group: ""
    kind: ServiceAccount
  descriptor:
    description: |
      NodeLocal DNSCache improves Cluster DNS performance by running a dns caching agent on cluster nodes as a DaemonSet. In todayâ€™s architecture, Pods in ClusterFirst DNS mode reach out to a kube-dns serviceIP for DNS queries. This is translated to a kube-dns/CoreDNS endpoint via iptables rules added by kube-proxy. With this new architecture, Pods will reach out to the dns caching agent running on the same node, thereby avoiding iptables DNAT rules and connection tracking. The local caching agent will query kube-dns service for cache misses of cluster hostnames(cluster.local suffix by default).
    icons:
    - src: https://github.com/kubernetes/kubernetes/raw/master/logo/logo.png
      type: image/png
    keywords:
    - addon
    - dns
    links:
    - description: Project Homepage
      url: https://github.com/kubernetes/kubernetes
    type: local-node-dns
    version: ""
  selector:
    matchLabels:
      addons.x-k8s.io/nodelocaldns: nodelocaldns-sample

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    addons.x-k8s.io/nodelocaldns: nodelocaldns-sample
    k8s-app: nodelocaldns
    kubernetes.io/cluster-service: "true"
  name: node-local-dns
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: node-local-dns
  template:
    metadata:
      annotations:
        prometheus.io/port: "9253"
        prometheus.io/scrape: "true"
      labels:
        k8s-app: node-local-dns
    spec:
      containers:
      - args:
        - -localip
        - 169.254.20.10,10.96.0.10
        - -conf
        - /etc/Corefile
        - -upstreamsvc
        - kube-dns-upstream
        image: registry.k8s.io/k8s-dns-node-cache:1.15.13
        livenessProbe:
          httpGet:
            host: 169.254.20.10
            path: /health
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 5
        name: node-cache
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9253
          name: metrics
          protocol: TCP
        resources:
          requests:
            cpu: 25m
            memory: 5Mi
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /run/xtables.lock
          name: xtables-lock
          readOnly: false
        - mountPath: /etc/coredns
          name: config-volume
        - mountPath: /etc/kube-dns
          name: kube-dns-config
      dnsPolicy: Default
      hostNetwork: true
      priorityClassName: system-node-critical
      serviceAccountName: node-local-dns
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      volumes:
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
      - configMap:
          name: kube-dns
          optional: true
        name: kube-dns-config
      - configMap:
          items:
          - key: Corefile
            path: Corefile.base
          name: node-local-dns
        name: config-volume
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 10%

---

apiVersion: v1
kind: Service
metadata:
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    addons.x-k8s.io/nodelocaldns: nodelocaldns-sample
    k8s-app: nodelocaldns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: KubeDNSUpstream
  name: kube-dns-upstream
  namespace: kube-system
spec:
  ports:
  - name: dns
    port: 53
    protocol: UDP
    targetPort: 53
  - name: dns-tcp
    port: 53
    protocol: TCP
    targetPort: 53
  selector:
    k8s-app: kube-dns
